
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Vector;

public class findCommonWords {

	
	  public static void main(String[] args) {
	        File file = new File("Middlemarch.txt");
	        StringBuffer contents = new StringBuffer();
	        Scanner scanner = null;
	        try {
	            scanner = new Scanner(new BufferedReader(new FileReader(file)));
	            String token = null;
		        String mostCommon = null;
                final Map<String, Integer> wordCount = new HashMap<String, Integer>();
                
                //List<String> frequent = new ArrayList<String>();
                Vector<String> frequent = new Vector<String>();

	            // repeat until all lines is read
	            while (scanner.hasNext()) {
	            	token = scanner.next();
	            	//System.out.println(text);
	                contents.append(token)
	                        .append(System.getProperty(
	                                "line.separator"));
	               
	                
	                if(mostCommon==null) mostCommon = token;
	                if(wordCount.containsKey(token)) {
	                	wordCount.put(token, wordCount.get(token)+1);
	                } else {
	                	wordCount.put(token, 1);
	                }
	                if(wordCount.get(token)>wordCount.get(mostCommon)) mostCommon = token;
	                
	                if(frequent.size()<10) {
	                	frequent.add(token);
	                } else if(wordCount.get(token)>wordCount.get(frequent.get(frequent.size()-1))) {
	                	frequent.add(frequent.size()-1, token);
		                Collections.sort(frequent, new Comparator<String>() {
							@Override
							public int compare(String str1, String str2) {
								return(wordCount.get(str2) - wordCount.get(str1));
							}
						});
	                }
	                

	                
	                

	            }
	            
	            int test = Collections.max(wordCount.values());
	            System.out.println(test);
	            System.out.println(mostCommon);
	            System.out.println(wordCount.get(mostCommon));
	            
	            System.out.println(frequent);
	            
	        } catch (FileNotFoundException e) {
	            e.printStackTrace();
	        } catch (IOException e) {
	            e.printStackTrace();
	        } finally {
	            if (scanner != null) {
				    scanner.close();
				}
	        }
	 
	        // show file contents here
	        //System.out.println(contents.toString());
	    }
	
	
}
